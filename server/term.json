{
  "nodes": [
    {
      "id": "1",
      "type": "input",
      "data": {
        "label": "SPA (Single Page Application) веб-приложение",
        "desc": "это веб-приложение, которое загружает HTML, CSS и JavaScript при первом запросе и затем динамически обновляет содержимое страницы без перезагрузки при последующих взаимодействиях пользователя с приложением"
      },
      "position": { "x": 1100, "y": 50 }
    },
    {
      "id": "2",
      "data": {
        "label": "Фреймворк",
        "desc": "это основа приложения, которая состоит из начальной архитектуры, набора инструментов и правил (соглашений) разработки приложения"
      },
      "position": { "x": 800, "y": 150 }
    },
    {
      "id": "3",
      "type": "output",
      "data": {
        "label": "Архитектура SPA веб-приложения ",
        "desc": "файловая структура проекта, встроенный набор инструментов для решения различных задач, набор внутренних абстракций, CLI инструменты для автоматизации задач"
      },
      "position": { "x": 1200, "y": 150 }
    },
    {
      "id": "4",
      "type": "output",
      "data": {
        "label": "Виртуальный DOM (Virtual DOM) ",
        "desc": "это паттерн, который применяется в современных библиотеках и фреймворках для разработки сложных интерфейсов, потому что позволяет оптимизировать взаимодействие с настоящим DOM, засчёт применения изменений на виртуальном DOM без лишних перерисовок"
      },
      "position": { "x": 950, "y": 550 }
    },
    {
      "id": "5",
      "type": "input",
      "data": {
        "label": "JavaScript библиотека",
        "desc": "это отдельный инструмент со специфичными функциями для решения какой-то задачи или нескольких задач"
      },
      "position": { "x": 1000, "y": 200 }
    },
    {
      "id": "6",
      "data": {
        "label": "Стейт-менеджер (State manager)",
        "desc": "инструмент, решающий задачу управления состоянием приложения"
      },
      "position": { "x": 1200, "y": 300 }
    },
    {
      "id": "7",
      "type": "output",
      "data": {
        "label": "Cостояние приложения",
        "desc": "минимальный набор изменяемых (динамических) данных для описания переменных свойств объекта"
      },
      "position": { "x": 1050, "y": 500 }
    },
    {
      "id": "8",
      "type": "input",
      "data": {
        "label": "Паттерн (шаблон) программирования",
        "desc": "повторно воспроизводимое решение типичных проблем в программировании, связанных с архитектурой приложения, управлению данными и их состоянием, взаимодействию объектов"
      },
      "position": { "x": 600, "y": 0 }
    },
    {
      "id": "9",
      "data": {
        "label": "MVVM (Model-View-ViewModel)",
        "desc": "паттерн, в котором вместо компонента «Модель» используется компонент «Модель представления», который связывает представление и модель и способен играть несколько ролей"
      },
      "position": { "x": 400, "y": 100 }
    },
    {
      "id": "10",
      "type": "output",
      "data": {
        "label": "Модель представления (ViewModel)",
        "desc": "это компонент, который отвечает за преобразование данных из модели в форму, удобную для отображения в представлении и содержит логику работы с данными, необходимую для обработки пользовательских действий и взаимодействия с моделью"
      },
      "position": { "x": 300, "y": 200 }
    },
    {
      "id": "11",
      "data": {
        "label": "Flux",
        "desc": "это паттерн разработки программного обеспечения, использующийся для управления состоянием приложения и однонаправленного обмена данными между компонентами, засчет разделения логики приложения на независимые компоненты – действия, диспетчер, хранилища, представления, что упрощает поддержку и расширение приложения засчет однонаправленности потока данных"
      },
      "position": { "x": 600, "y": 170 }
    },
    {
      "id": "12",
      "type": "output",
      "data": {
        "label": "Однонаправленный (односторонний) поток данных",
        "desc": "архитектурный паттерн, в котором данные стекают от компонента верхнего уровня к компонентам в нижней части дерева"
      },
      "position": { "x": 250, "y": 300 }
    },
    {
      "id": "13",
      "type": "output",
      "data": {
        "label": "Действия",
        "desc": "помощники, упрощающие передачу данных (полезной нагрузки) Диспетчеру и олицетворение событий – действий пользователя"
      },
      "position": { "x": 400, "y": 350 }
    },
    {
      "id": "14",
      "type": "output",
      "data": {
        "label": "Диспетчер",
        "desc": "регистратор функций обратного вызова хранилищ, принимающий Действия и рассылающий полезную нагрузку зарегистрированным обработчикам"
      },
      "position": { "x": 550, "y": 350 }
    },
    {
      "id": "15",
      "data": {
        "label": "Хранилища",
        "desc": "контейнеры для состояния приложения и бизнес-логики в обработчиках, зарегистрированных в Диспетчере"
      },
      "position": { "x": 850, "y": 350 }
    },
    {
      "id": "16",
      "data": {
        "label": "Представления",
        "desc": "компоненты, которые собирают состояние хранилищ и передают его дочерним компонентам через свойства"
      },
      "position": { "x": 700, "y": 350 }
    }
  ],
  "edges": [
    { "id": "el1-2", "source": "1", "target": "2", "label": "использует" },
    { "id": "el1-3", "source": "1", "target": "3", "label": "имеет" },
    { "id": "el2-4", "source": "2", "target": "4", "label": "предоставляет" },
    { "id": "el8-4", "source": "8", "target": "4", "label": "включает" },
    { "id": "el6-7", "source": "6", "target": "7", "label": "управляет" },
    { "id": "el5-4", "source": "5", "target": "4", "label": "предоставляет" },
    { "id": "el5-6", "source": "5", "target": "6", "label": "предоставляет" },
    { "id": "el1-7", "source": "1", "target": "7", "label": "имеет" },
    { "id": "el8-9", "source": "8", "target": "9", "label": "включает" },
    { "id": "el9-10", "source": "9", "target": "10", "label": "имеет" },
    { "id": "el8-11", "source": "8", "target": "11", "label": "включает" },
    { "id": "el11-12", "source": "11", "target": "12", "label": "имеет" },
    { "id": "el11-13", "source": "11", "target": "13", "label": "включает" },
    { "id": "el11-14", "source": "11", "target": "14", "label": "включает" },
    { "id": "el11-15", "source": "11", "target": "15", "label": "включает" },
    { "id": "el11-16", "source": "11", "target": "16", "label": "включает" },
    { "id": "el16-4", "source": "16", "target": "4", "label": "обновляет" },
    { "id": "el15-7", "source": "15", "target": "7", "label": "содержат" }
  ]
}
